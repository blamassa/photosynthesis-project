from datetime import date
import pandas as pd
import plotly.express as px


def ranking_fct_next_weekend(df_unified, cloud_area_threshold = 30):
    ''' Selects the next weekend's forecast.

    Args:
        df_unified (pandas.DataFrame): country unified dataframe, generated by the 'generate_cities_db.py' script. Population filters already applied.
        cloud_area_threshold (int): Standard value = 30. Represents the approximated % of sky area occupied by clouds in this location. 

    Returns:
        df_cloud (pandas.DataFrame): dataframe with cloud area filter and median already applied. Columns are [city,date, air_temperature, cloud_area_fraction, relative_humidity].
    '''
    # Select only weekend, represented by the integers 5 (saturday) and 6 (sunday)
    df_weekend = df_unified[df_unified['weekday'].isin([5,6])]
    # Select daytime only by remove midnight timepoints, as if it rains at that time I would be at home anyway
    df_daytime = df_weekend[df_weekend['time'] != '00:00:00']
    # Select the median of the forecast for easy plotting
    df_median = df_daytime.groupby(['city','date'], as_index=False).median()
    # Select sunniest locations by applying a cloud area fraction filter accordingly to the threshold
    df_cloud_median = df_median[df_median['cloud_area_fraction'] <= 30]
    # Rank cities accordingly to cloud area fraction
    df_cloud_median.sort_values('cloud_area_fraction')

    return df_cloud_median

def join_population_final_forecast(df_cloud_median, country_name:str):
    ''' Joins to the final filtered forecast dataframe and the population for plotting.

    Args:
        df_cloud_median (pandas.DataFrame):
        country_name (str)
        
    Returns:
        df_forecast_populated (pandas.DataFrame):
    '''
    # Join tables 
    df_filtered_cities= pd.read_csv('../db/filtered/{}_filtered_cities.csv'.format(country_name))
    df_forecast_populated = pd.merge(df_filtered_cities, df_cloud_median, left_on='city', right_on='city')

    return df_forecast_populated

def generate_plot(df_plot, country_name:str):
    ''' Generate an HTML plot of the final processed dataframe, with the sunnier cities in the given country.

    Args:
        df_plot (pandas.DataFrame): Final processed dataframe with population. Created by the join_population_final_forecast() method
        country_name (str)
    '''
    # Read token
    with open('../token','r') as f:
        token = f.read()

    # Create plot
    fig = px.scatter_mapbox(df_plot,
                        lat="lat", lon="lng", hover_name="city", hover_data=["admin_name", "population"],
                        color_discrete_sequence=["orange"], zoom=5)
    fig.update_layout(mapbox_style="dark", mapbox_accesstoken=token)
    fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})

    fig.write_html("../plots/{}_{}.html".format(country_name,date.today()))